import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button'; // Assuming you have a Button component
import { Input } from '@/components/ui/input'; // Assuming you have an Input component
import { Label } from '@/components/ui/label'; // Assuming you have a Label component
import { Textarea } from '@/components/ui/textarea'; // Assuming you have a Textarea component
import { useTelegramInit } from '@/hooks/useTelegramInit';
import { motion } from 'framer-motion';
import { ArrowLeft, Sparkles, Plus } from 'lucide-react'; // Added Sparkles and Plus icons
import { cn } from '@/lib/utils';


// Assuming the structure of your topics data, you might fetch this from an API or have it locally
const spanishTopicsData = [
  { id: 1, title: "Basic Greetings" },
  { id: 2, title: "Food & Drinks" },
  { id: 3, title: "Travel Phrases" },
  { id: 4, title: "Family Members" },
  { id: 5, title: "Shopping" },
  { id: 6, title: "Weather" },
  // Add other topics as needed
];

interface Phrase {
  spanish: string;
  english: string;
  note?: string;
}

// Interface for phrases generated by AI (might be slightly different initially)
interface GeneratedPhrase {
  spanish: string;
  english: string;
  note?: string;
}

function TopicPhrasesPage() {
  useTelegramInit("#F2F2F7", false);
  const { topicId } = useParams<{ topicId: string }>();
  const navigate = useNavigate();
  const [phrases, setPhrases] = useState<Phrase[]>([]);
  const [loadingPhrases, setLoadingPhrases] = useState(true); // State for loading existing phrases
  const [errorFetchingPhrases, setErrorFetchingPhrases] = useState<string | null>(null);
  const [topicTitle, setTopicTitle] = useState<string>('');

  // State for Phrase Generation
  const [generationPrompt, setGenerationPrompt] = useState('');
  const [generatedPhrases, setGeneratedPhrases] = useState<GeneratedPhrase[]>([]);
  const [loadingGeneration, setLoadingGeneration] = useState(false);
  const [errorGeneratingPhrases, setErrorGeneratingPhrases] = useState<string | null>(null);

  // State for Manual Phrase Addition
  const [newSpanishPhrase, setNewSpanishPhrase] = useState('');
  const [newEnglishPhrase, setNewEnglishPhrase] = useState('');
  const [newPhraseNote, setNewPhraseNote] = useState('');
  const [addingPhrase, setAddingPhrase] = useState(false);
  const [errorAddingPhrase, setErrorAddingPhrase] = useState<string | null>(null);


  // Effect to set topic title
  useEffect(() => {
    const topic = spanishTopicsData.find(t => t.id.toString() === topicId);
    if (topic) {
      setTopicTitle(topic.title);
    } else {
      setTopicTitle('Unknown Topic');
    }
  }, [topicId]);


  // Effect to fetch existing phrases
  useEffect(() => {
    const fetchPhrases = async () => {
      setLoadingPhrases(true);
      setErrorFetchingPhrases(null);
      try {
        const response = await axios.get(`https://voice-langify-8fmi.vercel.app/api/spanish-phrases/${topicId}`);
        setPhrases(response.data.phrases || []); // Ensure phrases is an array
      } catch (err: any) {
        console.error('Error fetching phrases:', err);
        setErrorFetchingPhrases(err.message || 'Failed to load phrases.');
      } finally {
        setLoadingPhrases(false);
      }
    };

    if (topicId) {
      fetchPhrases();
    }

  }, [topicId]); // Fetch phrases when topicId changes

  // Function to handle phrase generation
  const handleGeneratePhrases = async () => {
    if (!generationPrompt.trim()) {
      setErrorGeneratingPhrases('Please enter a prompt.');
      return;
    }

    setLoadingGeneration(true);
    setErrorGeneratingPhrases(null);
    setGeneratedPhrases([]); // Clear previous generated phrases

    try {
      // TODO: Replace with your actual DeepSeek generation endpoint
      // You will need a backend endpoint that calls the DeepSeek API
      const response = await axios.post('https://voice-langify-8fmi.vercel.app/api/generate-phrase', {
        prompt: `Generate Spanish phrases and their English translations about "${generationPrompt}" for topic "${topicTitle}". Provide the response in a JSON format like: [{\"spanish\": \"...\", \"english\": \"...\", \"note\": \"...\"}]`,
        topicId: topicId // Optionally send topicId to backend for context
      });

      // Assuming the backend returns an array of phrases in a 'phrases' field
      if (response.data && Array.isArray(response.data.phrases)) {
        setGeneratedPhrases(response.data.phrases);
      } else {
         // Handle unexpected response format
         setErrorGeneratingPhrases('Unexpected response format from AI.');
         console.error('Unexpected AI response:', response.data);
      }

    } catch (err: any) {
      console.error('Error generating phrases:', err);
      setErrorGeneratingPhrases(err.message || 'Failed to generate phrases.');
    } finally {
      setLoadingGeneration(false);
    }
  };

  // Function to handle manual phrase addition
  const handleAddPhrase = async () => {
    if (!newSpanishPhrase.trim() || !newEnglishPhrase.trim()) {
      setErrorAddingPhrase('Spanish and English phrases are required.');
      return;
    }

    setAddingPhrase(true);
    setErrorAddingPhrase(null);

    const phraseToAdd: Phrase = {
      spanish: newSpanishPhrase.trim(),
      english: newEnglishPhrase.trim(),
      note: newPhraseNote.trim() || undefined, // Use undefined for empty note
    };

    try {
      // Use the existing endpoint to add the new phrase
      const response = await axios.post(`https://voice-langify-8fmi.vercel.app/api/add-spanish-phrases`, {
        topicId: topicId,
        phrases: [phraseToAdd], // Send as an array with the new phrase
      });

      if (response.status === 201) {
        // On success, update the local state to include the new phrase
        // Fetching all phrases again is also an option, but updating state is faster
        setPhrases([...phrases, phraseToAdd]);

        // Clear the form
        setNewSpanishPhrase('');
        setNewEnglishPhrase('');
        setNewPhraseNote('');

        // Optionally show a success message
      } else {
         setErrorAddingPhrase(response.data.error || 'Failed to add phrase.');
      }

    } catch (err: any) {
      console.error('Error adding phrase:', err);
      setErrorAddingPhrase(err.message || 'Failed to add phrase.');
    } finally {
      setAddingPhrase(false);
    }
  };


  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-[#F2F2F7]"
    >
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-2xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button onClick={() => navigate(-1)} className="text-blue-500">
              <ArrowLeft size={24} />
            </button>
            <h1 className="text-xl font-semibold">{topicTitle}</h1>
            <div className="w-6" />
          </div>
        </div>
      </header>

      <main className="max-w-2xl mx-auto px-4 py-6">

        {/* Section for AI Phrase Generation */}
        <Card className="bg-white rounded-xl p-6 mb-6">
           <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Sparkles size={20} className="mr-2 text-blue-500"/> Generate Phrases with AI
           </h2>
           <div className="space-y-4">
              <div>
                 <Label htmlFor="generationPrompt">What kind of phrases do you want to generate?</Label>
                 <Input
                    id="generationPrompt"
                    placeholder="e.g., common phrases for ordering coffee"
                    value={generationPrompt}
                    onChange={(e) => setGenerationPrompt(e.target.value)}
                 />
              </div>
              <Button
                 onClick={handleGeneratePhrases}
                 disabled={loadingGeneration}
                 className="w-full"
              >
                 {loadingGeneration ? 'Generating...' : 'Generate'}
              </Button>
              {errorGeneratingPhrases && (
                 <p className="text-red-500 text-sm">{errorGeneratingPhrases}</p>
              )}

              {/* Display Generated Phrases */}
              {generatedPhrases.length > 0 && (
                 <div className="mt-4 pt-4 border-t border-gray-100">
                    <h3 className="text-md font-semibold text-gray-700 mb-3">Generated Phrases:</h3>
                    <div className="space-y-3">
                       {generatedPhrases.map((phrase, index) => (
                          <div key={index} className="bg-gray-50 p-3 rounded-md">
                             <p className="font-medium">{phrase.spanish}</p>
                             <p className="text-gray-600 text-sm">{phrase.english}</p>
                             {phrase.note && <p className="text-gray-500 text-xs mt-1">Note: {phrase.note}</p>}
                          </div>
                       ))}
                    </div>
                 </div>
              )}
           </div>
        </Card>


        {/* Section for Manual Phrase Addition */}
         <Card className="bg-white rounded-xl p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
               <Plus size={20} className="mr-2 text-green-500"/> Add Phrase Manually
            </h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddPhrase(); }} className="space-y-4">
               <div>
                  <Label htmlFor="newSpanishPhrase">Spanish Phrase</Label>
                  <Input
                     id="newSpanishPhrase"
                     value={newSpanishPhrase}
                     onChange={(e) => setNewSpanishPhrase(e.target.value)}
                     required
                  />
               </div>
               <div>
                  <Label htmlFor="newEnglishPhrase">English Translation</Label>
                  <Input
                     id="newEnglishPhrase"
                     value={newEnglishPhrase}
                     onChange={(e) => setNewEnglishPhrase(e.target.value)}
                     required
                  />
               </div>
               <div>
                  <Label htmlFor="newPhraseNote">Note (Optional)</Label>
                  <Textarea
                     id="newPhraseNote"
                     value={newPhraseNote}
                     onChange={(e) => setNewPhraseNote(e.target.value)}
                  />
               </div>
               <Button
                  type="submit"
                  disabled={addingPhrase}
                  className="w-full bg-green-500 hover:bg-green-600"
               >
                  {addingPhrase ? 'Adding...' : 'Add Phrase'}
               </Button>
               {errorAddingPhrase && (
                  <p className="text-red-500 text-sm">{errorAddingPhrase}</p>
               )}
            </form>
         </Card>


        {/* Section for Existing Phrases */}
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Existing Phrases</h2>
        {loadingPhrases ? (
          <div className="flex justify-center items-center">
            <div>Loading phrases...</div> {/* Replace with a spinner or styled loading indicator */}
          </div>
        ) : errorFetchingPhrases ? (
          <div className="flex justify-center items-center">
            <div className="text-red-500">Error: {errorFetchingPhrases}</div> {/* Styled error message */}
          </div>
        ) : phrases.length === 0 ? (
          <div className="text-center text-gray-600">
            No phrases found for this topic yet.
          </div>
        ) : (
          <div className="space-y-4">
            {phrases.map((phrase, index) => (
              <Card key={index} className="bg-white rounded-xl overflow-hidden">
                <CardHeader>
                  <CardTitle className="text-xl">{phrase.spanish}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700">{phrase.english}</p>
                  {phrase.note && <p className="text-gray-500 text-sm mt-2">Note: {phrase.note}</p>}
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>
    </motion.div>
  );
}

export default TopicPhrasesPage;
